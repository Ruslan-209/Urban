# Задание "Свой YouTube":
# Университет Urban подумывает о создании своей платформы, где будут размещаться дополнительные полезные ролики на тему IT (юмористические, интервью и т.д.). Конечно же для старта написания интернет ресурса требуются хотя бы базовые знания программирования.
#
# Именно вам выпала возможность продемонстрировать их, написав небольшой набор классов, которые будут выполнять похожий функционал на сайте.
#
# Всего будет 3 класса: UrTube, Video, User.
#
# Общее ТЗ:
# Реализовать классы для взаимодействия с платформой, каждый из которых будет содержать методы добавления видео, авторизации и регистрации пользователя и т.д.
#
# Подробное ТЗ:
#
# Каждый объект класса User должен обладать следующими атрибутами и методами:
# Атрибуты: nickname(имя пользователя, строка), password(в хэшированном виде, число), age(возраст, число)
# Каждый объект класса Video должен обладать следующими атрибутами и методами:
# Атрибуты: title(заголовок, строка), duration(продолжительность, секунды), time_now(секунда остановки (изначально 0)), adult_mode(ограничение по возрасту, bool (False по умолчанию))
# Каждый объект класса UrTube должен обладать следующими атрибутами и методами:
#  Атрибуты: users(список объектов User), videos(список объектов Video), current_user(текущий пользователь, User)
# Метод log_in, который принимает на вход аргументы: nickname, password и пытается найти пользователя в users с такими же логином и паролем. Если такой пользователь существует, то current_user меняется на найденного. Помните, что password передаётся в виде строки, а сравнивается по хэшу.
# Метод register, который принимает три аргумента: nickname, password, age, и добавляет пользователя в список, если пользователя не существует (с таким же nickname). Если существует, выводит на экран: "Пользователь {nickname} уже существует". После регистрации, вход выполняется автоматически.
# Метод log_out для сброса текущего пользователя на None.
# Метод add, который принимает неограниченное кол-во объектов класса Video и все добавляет в videos, если с таким же названием видео ещё не существует. В противном случае ничего не происходит.
# Метод get_videos, который принимает поисковое слово и возвращает список названий всех видео, содержащих поисковое слово. Следует учесть, что слово 'UrbaN' присутствует в строке 'Urban the best' (не учитывать регистр).
# Метод watch_video, который принимает название фильма, если не находит точного совпадения(вплоть до пробела), то ничего не воспроизводится, если же находит - ведётся отчёт в консоль на какой секунде ведётся просмотр. После текущее время просмотра данного видео сбрасывается.
# Для метода watch_video так же учитывайте следующие особенности:
# Для паузы между выводами секунд воспроизведения можно использовать функцию sleep из модуля time.
# Воспроизводить видео можно только тогда, когда пользователь вошёл в UrTube. В противном случае выводить в консоль надпись: "Войдите в аккаунт, чтобы смотреть видео"
# Если видео найдено, следует учесть, что пользователю может быть отказано в просмотре, т.к. есть ограничения 18+. Должно выводиться сообщение: "Вам нет 18 лет, пожалуйста покиньте страницу"
# После воспроизведения нужно выводить: "Конец видео"
#
# Код для проверки:
# ur = UrTube()
# v1 = Video('Лучший язык программирования 2024 года', 200)
# v2 = Video('Для чего девушкам парень программист?', 10, adult_mode=True)
#
# # Добавление видео
# ur.add(v1, v2)
#
# # Проверка поиска
# print(ur.get_videos('лучший'))
# print(ur.get_videos('ПРОГ'))
#
# # Проверка на вход пользователя и возрастное ограничение
# ur.watch_video('Для чего девушкам парень программист?')
# ur.register('vasya_pupkin', 'lolkekcheburek', 13)
# ur.watch_video('Для чего девушкам парень программист?')
# ur.register('urban_pythonist', 'iScX4vIJClb9YQavjAgF', 25)
# ur.watch_video('Для чего девушкам парень программист?')
#
# # Проверка входа в другой аккаунт
# ur.register('vasya_pupkin', 'F8098FM8fjm9jmi', 55)
# print(ur.current_user)
#
# # Попытка воспроизведения несуществующего видео
# ur.watch_video('Лучший язык программирования 2024 года!')
#
# Вывод в консоль:
# ['Лучший язык программирования 2024 года']
# ['Лучший язык программирования 2024 года', 'Для чего девушкам парень программист?']
# Войдите в аккаунт, чтобы смотреть видео
# Вам нет 18 лет, пожалуйста покиньте страницу
# 1 2 3 4 5 6 7 8 9 10 Конец видео
# Пользователь vasya_pupkin уже существует
# urban_pythonist
#
# Примечания:
# Не забывайте для удобства использовать dunder(магические) методы: __str__, __repr__, __contains__, __eq__ и др. (повторить можно здесь)
# Чтобы не запутаться рекомендуется после реализации каждого метода проверять как он работает, тестировать разные вариации.


import time

class User:
    def __init__(self, nickname, password, age):
        self.nickname = str(nickname)
        self.password = hash(password)
        self.age = int(age)

    def __str__(self):
        return self.nickname


class Video:
    def __init__(self, title, duration, time_now=0, adult_mode=False):
        self.title = str(title)
        self.duration = int(duration)
        self.time_now = int(time_now)
        self.adult_mode = adult_mode

    def __str__(self):
        return f"Video(title='{self.title}', duration={self.duration}, adult_mode={self.adult_mode})"


class UrTube:
    def __init__(self):
        self.users = []  # Список пользователей
        self.videos = []  # Список видео
        self.current_user = None  # Текущий пользователь (по умолчанию None)

    def log_in(self, nickname, password):
        for user in self.users:  # Проходим по всем пользователям
            if user.nickname == nickname and user.password == hash(password):  # Проверяем логин и хэш пароля
                self.current_user = user  # Устанавливаем текущего пользователя
                return

    def register(self, nickname, password, age):
        for user in self.users:  # Проверяем существующих пользователей
            if user.nickname == nickname:  # Если пользователь с таким именем уже существует
                print(f"Пользователь {nickname} уже существует")  # Выводим сообщение об ошибке
                return
        new_user = User(nickname, password, age)  # Создаем нового пользователя
        self.users.append(new_user)  # Добавляем его в список пользователей
        self.current_user = new_user  # Устанавливаем текущего пользователя

    def log_out(self):
        if self.current_user:
            pass
        self.current_user = None  # Сбрасываем текущего пользователя

    def add(self, *videos):
        existing_titles = set()  # Создаем пустое множество для хранения названий существующих видео

        for video in self.videos:  # Заполняем множество названиями уже существующих видео
            existing_titles.add(video.title)

        for video in videos:  # Проходим по видео, переданным в метод
            if video.title not in existing_titles:  # Проверяем, уникально ли название видео
                self.videos.append(video)  # Добавляем новое видео, если его название уникально

    def get_videos(self, search_word):
        search_word = search_word.lower()  # Приводим искомое слово к нижнему регистру
        matching_videos = []  # Создаем пустой список для совпадающих видео

        for video in self.videos:  # Проходим по всем видео
            if search_word in video.title.lower():  # Проверяем, содержится ли искомое слово в названии
                matching_videos.append(video.title)  # Добавляем совпадающее название видео в список
        return matching_videos  # Возвращаем список совпадающих названий

    def watch_video(self, name_video):
        if not self.current_user:  # Проверяем, вошел ли пользователь в систему
            print("Войдите в аккаунт, чтобы смотреть видео")  # Если нет, выводим сообщение
            return

        video = None  # Изначально задаем video как None
        for v in self.videos:  # Проходим по всем видео
            if v.title == name_video:  # Проверяем, совпадает ли название
                video = v  # Если нашли совпадение, сохраняем его
                break  # Выходим из цикла, так как видео найдено

        if video is None:  # Проверяем, было ли найдено видео
            print("Видео не найдено")  # Если нет, выводим сообщение об ошибке
            return

        if video.adult_mode and self.current_user.age < 18:  # Проверяем возрастное ограничение
            print("Вам нет 18 лет, пожалуйста, покиньте страницу")  # Если пользователь младше 18, выводим сообщение
            return

        for second in range(video.time_now, video.duration):  # Проходим по времени воспроизведения видео
            print(second + 1, end=' ', flush=True)  # Выводим текущую секунду
            time.sleep(1)  # Задержка в 1 секунду
        print("Конец видео")  # Выводим сообщение о конце видео
        video.time_now = 0  # Сброс времени просмотра после окончания видео

ur = UrTube()
v1 = Video('Лучший язык программирования 2024 года', 200)
v2 = Video('Для чего девушкам парень программист?', 10, adult_mode=True)

# Добавление видео
ur.add(v1, v2)

# Проверка поиска
print(ur.get_videos('лучший'))
print(ur.get_videos('ПРОГ'))

# Проверка на вход пользователя и возрастное ограничение
ur.watch_video('Для чего девушкам парень программист?')
ur.register('vasya_pupkin', 'lolkekcheburek', 13)
ur.watch_video('Для чего девушкам парень программист?')
ur.register('urban_pythonist', 'iScX4vIJClb9YQavjAgF', 25)
ur.watch_video('Для чего девушкам парень программист?')

# Проверка входа в другой аккаунт
ur.register('vasya_pupkin', 'F8098FM8fjm9jmi', 55)
print(ur.current_user)

# Попытка воспроизведения несуществующего видео
ur.watch_video('Лучший язык программирования 2024 года!')