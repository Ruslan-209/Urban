# Импорт необходимых библиотек
import random  # для генерации случайных чисел
import time  # для управления временем задержек
from threading import Thread  # для создания многопоточности
import queue  # для создания очереди между потоками

# Класс Bulka моделирует поток для выпечки булочек
class Bulka(Thread):
    # Инициализация класса
    def __init__(self, queue):
        super().__init__()  # вызов конструктора родительского класса Thread
        self.queue = queue  # инициализация очереди для передачи булочек

    # Основная логика работы потока Bulka
    def run(self):
        while True:
            time.sleep(3)  # ожидание 3 секунды перед выпечкой следующей булочки
            # Генерация случайного состояния булки: нормальная или подгоревшая
            if random.random() > 0.5:
                self.queue.put('подгорела булка')  # добавление подгоревшей булочки в очередь
            else:
                self.queue.put('нормальная булка')  # добавление нормальной булочки в очередь

# Класс Kotleta моделирует поток для работы с булочками
class Kotleta(Thread):
    # Инициализация класса
    def __init__(self, queue, count):
        super().__init__()  # вызов конструктора родительского класса Thread
        self.queue = queue  # инициализация очереди для получения булочек
        self.count = count  # количество булочек, которые нужно обработать

    # Основная логика работы потока Kotleta
    def run(self):
        while self.count:  # выполняем, пока count не станет равен нулю
            print(self.queue.qsize())  # вывод размера очереди на текущий момент
            # Извлечение булки из очереди с таймаутом в 10 секунд
            bulka = self.queue.get(timeout=10)
            # Проверка состояния булки
            if bulka == 'нормальная булка':
                time.sleep(0.3)  # задержка для обработки нормальной булочки
                self.count -= 1  # уменьшаем количество булочек, подлежащих обработке
            print('булок к приготовлению осталось', self.count)  # вывод количества оставшихся булочек

# Создание очереди с максимальной емкостью 10 элементов
queue = queue.Queue(maxsize=10)

# Создание и запуск потоков Bulka и Kotleta
t1 = Bulka(queue)
t2 = Kotleta(queue, 20)

t1.start()  # запуск потока Bulka
t2.start()  # запуск потока Kotleta

# Ожидание завершения обоих потоков
t1.join()
t2.join()
